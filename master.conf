#cloud-config
apt_sources:
 - source: "deb http://apt.puppetlabs.com trusty main"
   keyid: 1054b7a24bd6ec30
 - source: "deb http://repos.mesosphere.io/ubuntu trusty main"
   keyid: E56151BF
apt_upgrade: true
locale: en_US.UTF-8
packages:
 - facter
 - mesosphere
 - python-pip
 - python-dev
 - nginx
write_files:
-   path: /root/install-zk_flock
    permissions: '0700'
    content: |
        #!/bin/sh
        cd /root
        git clone https://github.com/noxiouz/python-flock.git
        cd python-flock
        python setup.py install
-   path: /etc/cron.d/confnginx
    permissions: '0644'
    content: "* * * * * root /root/confnginx.rb\n"
-   path: /etc/nginx/conf.d/mesos.conf
    permissions: '0644'
    content: ""
-   path: /etc/nginx/sites-available/default
    permissions: '0644'
    content: |
        server {
          listen 80 default_server;
          root /var/www/;
        }
-   path: /root/confnginx.rb
    permissions: '0700'
    content: |
        #!/usr/bin/ruby
        require 'json'
        exit 0 unless File.exists? '/etc/mesos/zk'

        exit 0 unless File.exists? '/etc/nginx_domain'

        domain = IO.read('/etc/nginx_domain').chomp

        az = `facter ec2_placement_availability_zone`.chomp
        region = az[0..-2]

        mesos_master = `mesos-resolve $(cat /etc/mesos/zk) 2>/dev/null`.chomp
        if mesos_master == ''
          puts "Could not find mesos master"
          exit 0
        end

        marathon_servers = JSON.parse(`/usr/local/bin/aws ec2 describe-instances --region #{region} --filters "Name=tag-key,Values=role" "Name=tag-value,Values=mesos-master" --query 'Reservations[].Instances[].[PrivateIpAddress][]'`).sort
        if !marathon_servers or marathon_servers.size == 0
          puts "Could not find any marathon servers"
          exit 0
        end

        app_upstreams = {}
        apps = JSON.parse(`curl http://#{marathon_servers[0]}:8080/v2/apps/ 2>/dev/null`)['apps'].map { |app| app['id'].gsub('/', '') }
        apps.each do |app|
          next if app == 'mesos_master'
          next if app == 'marathon'
          next if app == 'admin'
          next unless app.match /^(\w+)$/
          backends = `curl http://#{marathon_servers[0]}:8080/v2/apps/#{app}/tasks 2>/dev/null`.split(/\s+/)[2..-1]
          app_upstreams[app] = backends.sort
        end

        File.open('/tmp/nginx-mesos.conf', 'w') do |f|
          f.puts 'upstream mesos_master {'
          f.puts "    server #{mesos_master};"
          f.puts '}'
          f.puts 'server {'
          f.puts '    listen   80;'
          f.puts "    server_name mesos.admin.#{domain};"
          f.puts '    location {'
          f.puts '        proxy_pass http://mesos_master;'
          f.puts '    }'
          f.puts '}'
          f.puts 'upstream marathon {'
          marathon_servers.each { |server| f.puts "    server #{server}:8080;" }
          f.puts '}'
          f.puts 'server {'
          f.puts '    listen   80;'
          f.puts "    server_name mesos.admin.#{domain};"
          f.puts '    location {'
          f.puts '        proxy_pass http://mesos_master;'
          f.puts '    }'
          f.puts '}'
          app_upstreams.keys.sort.each do |app|
            f.puts "upstream #{app} {"
              app_upstreams[app].each { |server| f.puts "    server #{server};" }
            f.puts '}'
            f.puts 'server {'
            f.puts '    listen   80;'
            f.puts "    server_name #{app}.#{domain};"
            f.puts '    location {'
            f.puts '        proxy_pass http://#{app};'
            f.puts '    }'
            f.puts '}'
          end
        end
        if !system 'diff -u /etc/nginx/conf.d/mesos.conf /tmp/nginx-mesos.conf'
          File.rename '/tmp/nginx-mesos.conf', '/etc/nginx/conf.d/mesos.conf'

          system '/etc/init.d/nginx reload'
        else
          File.unlink '/tmp/nginx-mesos.conf'
        end
-   path: /root/setupmaster.rb
    permissions: '0700'
    content: |
        #!/usr/bin/ruby
        require 'json'

        cluster_size = 0
        File.open('/etc/zookeeper/conf/cluster_size', 'r') { |f| cluster_size = f.read.chomp.to_i }

        zk_servers = []
        while zk_servers.size < cluster_size
          zk_servers = JSON.parse(`/usr/local/bin/aws ec2 describe-instances --region eu-central-1 --filters "Name=tag-key,Values=role" "Name=tag-value,Values=mesos-master" --query 'Reservations[].Instances[].[PrivateIpAddress][]'`).sort
        end

        myip = `facter ipaddress_eth0`.chomp

        File.open('/etc/zookeeper/conf/zoo.cfg', 'a') do |f|
          count = 1
          zk_servers.each do |server|
            f.puts "server.#{count}=#{server}:2888:3888"
            if server.match(myip)
              File.open('/etc/zookeeper/conf/myid', 'w') { |z| z.puts count }
            end
            count = count +1
          end
        end

        zk_servers = zk_servers.map { |s| "#{s}:2181" }

        File.open('/etc/mesos/zk', 'w') do |f|
          f.puts "zk://#{zk_servers.join(',')}/mesos"
        end
        File.open('/etc/marathon/conf/zk', 'w') do |f|
          f.puts "zk://#{zk_servers.join(',')}/marathon"
        end

        File.open('/etc/mesos-master/quorum', 'w') do |f|
          f.puts (cluster_size / 2).to_int + 1
        end 
runcmd:
 - [ mkdir, -p, /var/www ]
 - [ echo, manual, ">", /etc/init/mesos-slave.override ]
 - [ /usr/bin/pip, install, awscli ]
 - [ /usr/bin/pip, install, zk_shell ]
 - [ /root/install-zk_flock ]
 - [ sh, -c, "echo __DOMAIN__ > /etc/nginx_domain" ]
 - [ sh, -c, "echo __CLUSTER_SIZE__ > /etc/zookeeper/conf/cluster_size" ]
 - [ mkdir, -p, /etc/marathon/store ]
 - [ mkdir, -p, /etc/marathon/conf ]
 - [ sh, -c, "echo file:///etc/marathon/store > /etc/marathon/conf/artifact_store" ]
 - [ /root/setupmaster.rb ]
 - [ stop, mesos-slave ]
 - [ restart, zookeeper ]
 - [ start, mesos-master ]
 - [ start, marathon ]
 - [ /etc/init.d/nginx, restart ]

