#cloud-config
apt_sources:
 - source: "deb https://get.docker.io/ubuntu docker main"
   keyid: 36A1D7869245C8950F966E92D8576A8BA88D21E9
 - source: "deb http://apt.puppetlabs.com trusty main"
   keyid: 1054b7a24bd6ec30
 - source: "deb http://repos.mesosphere.io/ubuntu trusty main"
   keyid: E56151BF
apt_upgrade: true
locale: en_US.UTF-8
packages:
 - lxc-docker
 - facter
 - mesos
 - git
 - python-pip
 - unzip
 - python-dev
write_files:
-   path: /tmp/install-zk_flock
    permissions: '0700'
    content: |
        #!/bin/sh
        set -e
        cd /tmp
        git clone https://github.com/noxiouz/python-flock.git
        cd python-flock
        python setup.py install
        cd /
        rm -rf /tmp/install-zk_flock /tmp/python-flock
-   path: /etc/cron.d/check_masters
    permissions: '0644'
    content: "*/5 * * * * /root/setupslave.rb cron\n"
-   path: /root/setupslave.rb
    permissions: '0700'
    content: |
        #!/usr/bin/ruby
        require 'json'

        mode = ARGV[0]
        raise("Unknown mode '#{mode}'") if mode != 'cron' and mode != 'boot'

        cluster_size = 0
        File.open('/etc/zookeeper/conf/cluster_size', 'r') { |f| cluster_size = f.read.chomp.to_i }
        quorum = (cluster_size/2).to_int + 1

        wait_size = cluster_size
        if mode == 'cron'
          wait_size = quorum
        end

        zk_servers = []
        while zk_servers.size < wait_size
          zk_servers = begin
            JSON.parse(`/usr/local/bin/aws ec2 describe-instances --region eu-central-1 --filters "Name=tag-key,Values=role" "Name=tag-value,Values=mesos-master" --query 'Reservations[].Instances[].[PrivateIpAddress][]'`).sort.map { |s| "#{s}:2181" }
          rescue
          end
          sleep 10 if zk_servers.size < wait_size
        end

        File.open('/tmp/zk', 'w') do |f|
          f.puts "zk://#{zk_servers.join(',')}/mesos"
        end
        zk_flock_conf = {
          "host" => zk_servers,
          "timeout" => 120,
          "app_id" => "zk_flock",
          "sleep" => "OFF",
          "logger" => { "path" => "/tmp/zkflock.log", "level" => "INFO","zklevel" => "ERROR" }
        }
        File.open('/tmp/distributed-flock.json', 'w') do |f|
          f.puts JSON.pretty_generate zk_flock_conf
        end 
        if mode == 'boot'
          File.rename '/tmp/zk', '/etc/mesos/zk'
        else
          if !system 'diff -u /etc/mesos/zk /tmp/zk'
            File.rename '/tmp/distributed-flock.json', '/etc/distributed-flock.json'
            File.rename '/tmp/zk', '/etc/mesos/zk'
            system 'zk-flock mesos-slave-restart "sh -c \'/sbin/initctl restart mesos-slave;sleep 120\'"'
          end
        end
runcmd:
 - [ /usr/bin/pip, install, awscli ]
 - [ /usr/bin/pip, install, zk_shell ]
 - [ /tmp/install-zk_flock ]
 - [ stop, zookeeper ]
 - [ stop, mesos-master ]
 - [ mkdir, -p, /etc/zookeeper/conf/ ]
 - [ sh, -c, "echo __ZOOKEEPER_CLUSTER_SIZE__ > /etc/zookeeper/conf/cluster_size" ]
 - [ sh, -c, "echo manual > /etc/init/zookeeper.override" ]
 - [ sh, -c, "echo manual > /etc/init/mesos-master.override" ]
 - [ /root/setupslave.rb, boot ]
 - [ sh, -c, "echo 'docker,mesos' > /etc/mesos-slave/containerizers" ]
 - [ sh, -c, "echo $(facter ipaddress_eth0) > /etc/mesos-slave/hostname" ]
 - [ sh, -c, "echo $(facter ipaddress_eth0) > /etc/mesos-slave/ip" ]
 - [ start, mesos-slave ]

